<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>de.metas.parent.general</artifactId>
		<groupId>de.metas</groupId>
		<version>1.0.0</version>
	</parent>

	<artifactId>de.metas.parent</artifactId>

	<!-- FRESH-271: we need an explicit version here, otherwise versions-maven-plugin
		can't set it to another version it -->
	<version>1.0.0</version>

	<packaging>pom</packaging>

	<description>metasfresh parent pom with common settings to be used by all metasfreseh maven projects</description>

	<!-- TODO: consider removing jasperreports.version and dependencyManagement
		from this pom. It will instead be handled by adempiereJasper-parent -->

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<servicemix.java.version>1.7</servicemix.java.version>

		<!-- right now 6.2.2 is the latest, but there we suffer from http://community.jaspersoft.com/jasperreports-library/issues/7521 -->
		<jasperreports.version>6.2.1</jasperreports.version>

		<!-- FRESH-397: jasper 6.2.1 uses poi and zxing with theses versions -->
		<!-- actually, jasper-6.2.1 accidentally uses 2.1.7.js5-SNAPSHOT, but we don't don't -->
		<itext.version>2.1.7.js5</itext.version>
		<poi.version>3.12</poi.version>
		<zxing.version>2.3.0</zxing.version>

		<!-- this also happens to be the activeMQ.version used by http://servicemix.apache.org/downloads/servicemix-6.1.0 -->
		<activeMQ.version>5.12.1</activeMQ.version>

		<spring-boot.version>1.5.3.RELEASE</spring-boot.version>

		<!-- this is the version uses by elasticsearch:2.4.4 which is turn is used by spring-boot 1.5.3 -->
		<lucene.version>5.5.2</lucene.version>

		<!--
			Note that we need spring in de.metas.report.jasper.client and ...jasper.server.base
			for some reason. -->
		<!-- For versions info, see https://github.com/spring-projects/spring-boot/blob/v1.5.3.RELEASE/spring-boot-dependencies/pom.xml -->
		<spring.version>4.3.8.RELEASE</spring.version>

		<guava.version>21.0</guava.version>

		<!-- The version to be used by metasfresh, as opposed to the ESB's. The
			two versions might clash in ait modules -->
		<metasfresh.cxf.version>3.1.6</metasfresh.cxf.version>

		<!-- this version can't be updated by the versions plugin, but we can pass it through our pipeline and set this property in downstream jobs -->
		<metasfresh.assembly.descriptor.version>1.0.0</metasfresh.assembly.descriptor.version>

		<!-- Tells SonarQube to run the unit tests -->
		<sonar.dynamicAnalysis>true</sonar.dynamicAnalysis>
		<!-- Tells SonarQube to use JaCoCo (formerly EclEmma) as our unit test
			coverage tool -->
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>

		<license.name>gpl_v2</license.name>

		<acceptance.reports.dir>target/acceptance-reports</acceptance.reports.dir>

	</properties>

	<!-- FRESH-271 by declaring those three reactor poms as modules of this parent
		pom, we can set all the versions from cmdline, using mvn org.codehaus.mojo:versions-maven-plugin:2.1:revert
		-DnewVersion=tst -f de.metas.parent\pom.xml Note that we use version 2.1
		because of http://stackoverflow.com/questions/29995139/maven-versions-maven-plugin-versions-plugin-2-2 -->
	<modules>
		<module>../de.metas.reactor</module>
		<module>../de.metas.reactor.ait</module>
		<module>../de.metas.esb</module>
	</modules>

	<dependencyManagement>
		<dependencies>
			<!-- Import dependency management from Spring Boot -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>

			<dependency>
				<groupId>net.sf.jasperreports</groupId>
				<artifactId>jasperreports</artifactId>
				<version>${jasperreports.version}</version>
			</dependency>
			
			<!-- manage the versions of lucene because we need to exclude them from jasperreports and then want to explicitly add them -->
			<dependency>
				<groupId>org.apache.lucene</groupId>
				<artifactId>lucene-queryparser</artifactId>
				<version>${lucene.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.lucene</groupId>
				<artifactId>lucene-analyzers-common</artifactId>
				<version>${lucene.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.lucene</groupId>
				<artifactId>lucene-core</artifactId>
				<version>${lucene.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.lucene</groupId>
				<artifactId>lucene-queries</artifactId>
				<version>${lucene.version}</version>
			</dependency>

			<dependency>
				<groupId>com.lowagie</groupId>
				<artifactId>itext</artifactId>
				<version>${itext.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi</artifactId>
				<version>${poi.version}</version>
			</dependency>
			<dependency>
				<groupId>com.google.zxing</groupId>
				<artifactId>core</artifactId>
				<version>${zxing.version}</version>
			</dependency>
			<dependency>
				<groupId>com.google.zxing</groupId>
				<artifactId>javase</artifactId>
				<version>${zxing.version}</version>
			</dependency>

			<dependency>
				<groupId>commons-codec</groupId>
				<artifactId>commons-codec</artifactId>
				<version>1.6</version>
			</dependency>

			<dependency>
				<groupId>org.jmockit</groupId>
				<artifactId>jmockit</artifactId>
				<version>1.30</version>
			</dependency>

			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-core</artifactId>
				<version>${activeMQ.version}</version>
			</dependency>
			<!-- note: you probably don't want to use active-mq all, because it's
				likely that the enforcer plugin will fail with it. The reason is that it
				also includes 3rd-party classes which we already include otherwise. -->
			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-all</artifactId>
				<version>${activeMQ.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-broker</artifactId>
				<version>${activeMQ.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-client</artifactId>
				<version>${activeMQ.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.activemq</groupId>
				<artifactId>activemq-kahadb-store</artifactId>
				<version>${activeMQ.version}</version>
			</dependency>

			<dependency>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
				<version>1.2</version>
			</dependency>

			<!-- Thx for the two fonts to http://ansuz.sooke.bc.ca/page/fonts ^^ -->
			<dependency>
				<groupId>jp.osdn.ocra</groupId>
				<artifactId>jp.osdn.ocra</artifactId>
				<version>0.2</version>
			</dependency>
			<dependency>
				<groupId>jp.osdn.ocrb</groupId>
				<artifactId>jp.osdn.ocrb</artifactId>
				<version>0.2.1</version>
			</dependency>

			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>3.1.0</version>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jstl</artifactId>
				<version>1.2</version>
			</dependency>

			<dependency>
				<groupId>javax.mail</groupId>
				<artifactId>mail</artifactId>
				<!-- Version 1.4.1 would also be available as OSGI bundle for servicemix,
					see http://repo1.maven.org/maven2/org/apache/servicemix/bundles/org.apache.servicemix.bundles.javax.mail -->
				<version>1.4.3</version>
			</dependency>

			<!-- Concordion for acceptance testing -->
			<dependency>
				<groupId>org.concordion</groupId>
				<artifactId>concordion</artifactId>
				<version>1.5.1</version>
			</dependency>

			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<dependency>
			<groupId>org.jmockit</groupId>
			<artifactId>jmockit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-library</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.1.2</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.3.1</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.10</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>1.8</version>
				</plugin>

				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-bundle-plugin</artifactId>
					<version>2.5.4</version>
				</plugin>

				<plugin>
					<!-- we need a version that supports encrypted passwords in the settings.xml -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jarsigner-plugin</artifactId>
					<version>1.3.2</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-shade-plugin</artifactId>
					<version>2.4.2</version>
				</plugin>

				<!--This plugin's configuration is used to store Eclipse m2e settings
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											jasperreports-maven-plugin
										</artifactId>
										<versionRange>
											[1.0-beta-2,)
										</versionRange>
										<goals>
											<goal>compile-reports</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.4,)
										</versionRange>
										<goals>
											<goal>
												unpack-dependencies
											</goal>
											<goal>unpack</goal>
											<goal>
												copy-dependencies
											</goal>
											<goal>copy</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-antrun-plugin</artifactId>
										<versionRange>[1.7,)</versionRange>
										<goals>
											<goal>run</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.codehaus.mojo</groupId>
										<artifactId>license-maven-plugin</artifactId>
										<versionRange>[1.8,)</versionRange>
										<goals>
											<goal>update-file-header</goal>
											<goal>update-project-license</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-plugin-plugin</artifactId>
										<versionRange>[3.4,)</versionRange>
										<goals>
											<goal>descriptor</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<extensions>
			<extension>
				<!-- Enabling the use of external ssh commands to deliver artifacts to
					our repo. We are using putty, which means that authentification is done by
					pageant :-) -->
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-ssh-external</artifactId>
				<version>1.0-beta-6</version>
			</extension>
		</extensions>

		<plugins>
			<!-- add the gpl-2 license header to our source files. Note that the source
				files in java-legacy were not (entirely) created/edited by us and already
				have their own license header with which we don't want to tamper. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<id>update-file-header</id>
						<goals>
							<goal>update-file-header</goal>
						</goals>
						<!-- don't upodate the file haeders. it created too much unwanted changes -->
						<!-- phase>process-sources</phase -->
						<configuration>
							<licenseName>${license.name}</licenseName>
							<roots>
								<root>src/main/java</root>
								<root>src/test</root>
							</roots>
							<excludes>
								<!-- the license header might be placed right into the preexisting
									package-info-javadoc and introdcue a compiler syntax error, so we exclude
									this -->
								<exclude>**/package-info.java</exclude>
								<!-- our only json files are test samples; we don't need to license
									them, but the license header would cause trouble reading/parsing the json
									files. that's why we exclude them -->
								<exclude>**/*.json</exclude>
								<!-- with xml it's similar as it is with json -->
								<exclude>**/*.xml</exclude>
							</excludes>
						</configuration>
					</execution>
					<execution>
						<id>update-project-license</id>
						<goals>
							<goal>update-project-license</goal>
						</goals>
						<phase>process-sources</phase>
						<configuration>
							<licenseName>${license.name}</licenseName>
							<outputDirectory>${project.build.directory}</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- We always want to attach the sources -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-sources</id>
						<phase>verify</phase>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-springboot-properties</id>
						<phase>process-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<encoding>UTF-8</encoding>
							<delimiters>
								<delimiter>@</delimiter>
								<useDefaultDelimiters>false</useDefaultDelimiters>
							</delimiters>
							<outputDirectory>${project.build.directory}/classes</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
										<include>application*.properties</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>


			<!-- Don't archive a web project's files (i.e. put the classes into WEB-INF/classes),
				because we want skinny war to include theirs own classes in that folder (and
				their WEB-INF/lib to be empty) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archiveClasses>false</archiveClasses>
					<attachClasses>true</attachClasses>
				</configuration>
			</plugin>

			<!-- thanks to https://docs.spring.io/spring-boot/docs/current/reference/html/howto-build.html#howto-git-info -->
			<plugin>
				<groupId>pl.project13.maven</groupId>
				<artifactId>git-commit-id-plugin</artifactId>
				<version>2.2.2</version>
			</plugin>

		</plugins>

	</build>

	<profiles>
		<profile>
			<!-- If there is a sql directory, then this profile will activate and zip up
				the migration SQL files in that directory. Note the property "migration-sql-basedir"
				needs to be defined in that case -->
			<id>postgres</id>
			<activation>
				<file>
					<exists>src/main/sql/postgresql/system</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<dependencies>
							<dependency>
								<groupId>de.metas</groupId>
								<artifactId>metasfresh-assemblies</artifactId>
								<!-- version>${metasfresh.assembly.descriptor.version}</version -->
								<version>[1.0.0,10.0.0]</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>make-postgresql-assembly</id> <!-- this is used for inheritance merges -->
								<phase>package</phase> <!-- bind to the packaging phase -->
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptorRefs>
										<descriptorRef>migration_postgresql_system</descriptorRef>
									</descriptorRefs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- If there is a jasper sources directory, this profile will activate
				It will compile those jrxml files and then assemble the jasper files into
				a jar. It will *NOT* add src/main/jasperreports as additional source folder,
				(that's done by the "jasper-source-folder" profile) -->
			<id>jasper-build</id>

			<activation>
				<file>
					<exists>src/main/jasperreports</exists>
				</file>
			</activation>

			<build>
				<plugins>
					<plugin>
						<artifactId>maven-resources-plugin</artifactId>
						<version>2.6</version>
						<executions>
							<execution>
								<id>copy-resources</id>
								<phase>process-resources</phase>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<configuration>
									<!-- same as jasperreports-maven-plugin's outputDirectory -->
									<outputDirectory>${project.build.directory}/jasper</outputDirectory>
									<resources>
										<resource>
											<directory>src/main/jasperreports</directory>
											<excludes>
												<exclude>**/*.jrxml</exclude> <!-- jrxmls are compiled into jasper files, they don't need to be copied -->
											</excludes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>jasperreports-maven-plugin</artifactId>
						<version>1.0-beta-2</version>
						<configuration>
							<outputDirectory>${project.build.directory}/jasper</outputDirectory>
						</configuration>

						<dependencies>
							<!-- for whatever reason, if we don't set this version explicitly,
								the plugin will try to work with 2.1.7.js5-SNAPSHOT -->
							<dependency>
								<groupId>com.lowagie</groupId>
								<artifactId>itext</artifactId>
								<version>${itext.version}</version>
							</dependency>

							<!-- note that excluding jasperreports:jasperreports version 1.2 doesn't
								work even if we don't need it, see http://stackoverflow.com/questions/34193602/how-to-exclude-jasperreports-artifact-from-jasperreports-maven-plugin/34198348 -->
							<dependency>
								<groupId>org.codehaus.mojo</groupId>
								<artifactId>jasperreports-maven-plugin</artifactId>
								<version>1.0-beta-2</version>
							</dependency>
							<dependency>
								<groupId>net.sf.jasperreports</groupId>
								<artifactId>jasperreports</artifactId>
								<version>${jasperreports.version}</version>
							</dependency>

							<!-- required to compile reports with barcodes -->
							<!-- FRESH-397: see if we can remove it, too <dependency> <groupId>net.sf.barcode4j</groupId>
								<artifactId>barcode4j-fop-ext-complete</artifactId> <version>2.0</version>
								<type>jar</type> <scope>compile</scope> </dependency> -->
						</dependencies>
						<executions>
							<execution>
								<goals>
									<goal>compile-reports</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<dependencies>
							<dependency>
								<groupId>de.metas</groupId>
								<artifactId>metasfresh-assemblies</artifactId>
								<!-- version>${metasfresh.assembly.descriptor.version}</version -->
								<version>[1.0.0,10.0.0]</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>make-jasper-assembly</id> <!-- this is used for inheritance merges -->
								<phase>package</phase> <!-- bind to the packaging phase -->
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptorRefs>
										<descriptorRef>jasper</descriptorRef>
									</descriptorRefs>
								</configuration>
							</execution>
							<execution>
								<id>make-jasper-sources-assembly</id> <!-- this is used for inheritance merges -->
								<phase>package</phase> <!-- bind to the packaging phase -->
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptorRefs>
										<descriptorRef>jasper_sources</descriptorRef>
									</descriptorRefs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- Adds src/main/jasperreports as additional source folder (if the directory
				is present) this is only intended to be active when running in eclipse, and
				not for *any* actual maven build. we don't want the jasper-stuff to end up
				in a "regular" artifact jar! Particularly the properties files need to be
				overridden in certain situations, so we can't afford to have an additional
				copy in the classpath via regular jars Hint: in eclipse, you can activate
				this profile in the projects where you need it, by opening the projects properties
				(=>maven). But, then you can't build a proper artifact using eclipse-maven -->
			<id>jasper-source-folder</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-resource</id>
								<phase>generate-resources</phase>
								<goals>
									<goal>add-resource</goal>
								</goals>
								<configuration>
									<resources>
										<resource>
											<directory>src/main/jasperreports</directory>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<!-- 
			If there is a "webapp" directory, this profile will activate and put the content into a zip file 
			this was (and still is in some legacy projects!) used to create web folders for different modules which can in the end be all mashed into one.
		-->
		<profile>
			<id>webapp-dir-legacy</id>
			<activation>
				<file>
					<exists>src/main/webapp</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<dependencies>
							<dependency>
								<!--  these are the de.metas.assemblies:de.metas.assemblies:1.0.0 of ye olden days. they contain the webapp_dir which our modern assemblies do not contain anymore -->
								<groupId>de.metas</groupId>
								<artifactId>metasfresh-legacy-assemblies</artifactId>
								<version>1.0.0</version>
							</dependency>
						</dependencies>
						<executions>
							<execution>
								<id>make-webapp-dir-assembly</id> <!-- this is used for inheritance merges -->
								<phase>package</phase> <!-- bind to the packaging phase -->
								<goals>
									<goal>single</goal>
								</goals>
								<configuration>
									<descriptorRefs>
										<descriptorRef>webapp_dir</descriptorRef>
									</descriptorRefs>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- If there is a maven java-gen sources directory, this profile will
				activate and add the directory as another sources directory -->
			<id>add-source-java-gen</id>
			<activation>
				<file>
					<exists>src/main/java-gen</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<!-- Adds src/main/java-gen as additional source folder (if the directory
							is present) -->
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-source-java-gen</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>src/main/java-gen</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- If there is a maven java-legacy sources directory, this profile will
				activate and add the directory as another sources directory -->
			<id>add-source-java-legacy</id>
			<activation>
				<file>
					<exists>src/main/java-legacy</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<!-- Adds src/main/java-gen as additional source folder (if the directory
							is present) -->
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>build-helper-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>add-source-java-legacy</id>
								<phase>generate-sources</phase>
								<goals>
									<goal>add-source</goal>
								</goals>
								<configuration>
									<sources>
										<source>src/main/java-legacy</source>
									</sources>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- If the file KEYSTORE_REQUIRED.txt is present in a child project,
				then we assume that some code needs to be signed. Therefore, the parent-pom
				profile with id "prepare-code-signing" activates to download our keystores,
				unpack them into the "${project.build.directory}/keystore" folder and set
				properties so that e.g. the printing client applet can be singned with our
				"developement" signature. Note that: *these default properties can be overridden
				from outside. *our "development" signature is not verified by a CA and is
				therefore not meant to be rolled out at the customer. *the actual signing
				does not take place in this profile, because different projects will sign
				different files (and might even use the keystore with different plugins). -->
			<id>prepare-code-signing</id>
			<activation>
				<file>
					<exists>KEYSTORE_REQUIRED.txt</exists>
				</file>
			</activation>
			<properties>
				<!-- This is the developement keystore and its passwords. They are supposed
					to make sure that a build on a local dev workstatation won't fail. To sign
					a "real" build for production, they need to be overwritten from outside (=>handled
					by jenkins and/or the RM). -->
				<keystore.version>1.4.0_dev</keystore.version>
				<keystore.alias>metas_dev</keystore.alias>
				<keystore.store.password>metas_dev</keystore.store.password>
				<keystore.key.password>metas_dev</keystore.key.password>

				<keystore.file>metas_development_keystore</keystore.file>
				<keystore.path>${project.build.directory}/keystore/${keystore.file}</keystore.path>
			</properties>
			<build>
				<plugins>
					<plugin>
						<!-- get our keystores and unpack them to the target folder -->
						<!-- thx to http://maksim.sorokin.dk/it/2010/08/19/signing-jars-on-a-build-server/ -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<executions>
							<execution>
								<id>unpack</id>
								<!-- choosing an early phase to make sure the keystore files are
									there on prepare-package -->
								<phase>initialize</phase>
								<goals>
									<goal>unpack</goal>
								</goals>
								<configuration>
									<artifactItems>
										<artifactItem>
											<groupId>de.metas.keystore</groupId>
											<artifactId>de.metas.keystore</artifactId>
											<version>${keystore.version}</version>
											<type>zip</type>
											<outputDirectory>${project.build.directory}/keystore</outputDirectory>
											<includes>*</includes>
										</artifactItem>
									</artifactItems>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- If the environment variable BUILD_NUMBER is not set, it means that
				we are not building on jenkins, so we substitute the value "LOCAL-BUILD"
				instead. And we set BUILD_NUMBER_NUMERIC to 0, because some parts of the
				build (=>launch4j) requiere the build number to always be a number. -->
			<id>build-number-env-missing</id>
			<activation>
				<property>
					<name>!env.BUILD_NUMBER</name>
				</property>
			</activation>
			<properties>
				<BUILD_NUMBER_NUMERIC>0</BUILD_NUMBER_NUMERIC>
				<env.BUILD_NUMBER>LOCAL-BUILD</env.BUILD_NUMBER>
			</properties>
		</profile>
		<profile>
			<!-- If the environment variable BUILD_NUMBER is set, we assume that it
				is numeric, and we set BUILD_NUMBER_NUMERIC to that value -->
			<id>build-number-env-provided</id>
			<activation>
				<property>
					<name>env.BUILD_NUMBER</name>
				</property>
			</activation>
			<properties>
				<BUILD_NUMBER_NUMERIC>${env.BUILD_NUMBER}</BUILD_NUMBER_NUMERIC>
			</properties>
		</profile>

		<!--
			This profile is analog to "build-number-env-missing" 
			Note that unlike "BUILD_NUMBER", this "MF_BUILD_VERSION" is not a jenkins standard, but provided by our particular jenkins files.
			That's why we use the "MF_" prefix.
		-->
		<profile>
			<id>build-version-env-missing</id>
			<activation>
				<property>
					<name>!env.MF_BUILD_VERSION</name>
				</property>
			</activation>
			<properties>
				<env.MF_BUILD_VERSION>1.0.0</env.MF_BUILD_VERSION>
			</properties>
		</profile>

		<!--this profile is analog to "build-number-env-missing" -->
		<profile>
			<id>MF_UPSTREAM_BRANCH-env-missing</id>
			<activation>
				<property>
					<name>!env.MF_UPSTREAM_BRANCH</name>
				</property>
			</activation>
			<properties>
				<env.MF_UPSTREAM_BRANCH>LOCAL-BUILD</env.MF_UPSTREAM_BRANCH>
			</properties>
		</profile>

	</profiles>
</project>
