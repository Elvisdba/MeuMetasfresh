<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<parent>
		<artifactId>metasfresh-report</artifactId>
		<groupId>de.metas.report</groupId>
		<version>[1,10.0.0]</version>
		<relativePath>../pom.xml</relativePath>
	</parent>
	<modelVersion>4.0.0</modelVersion>
	
	<version>10.0.0</version>
	<artifactId>report-service</artifactId>

	<properties>
		<migration-sql-basedir>42-de.metas.report.jasper.server</migration-sql-basedir>
		<start-class>de.metas.report.ReportServiceMain</start-class>
		<metasfresh.version>[1,10.0.0]</metasfresh.version>
	</properties>

	<!-- 
		Exclude lucene stuff from jasperreports because it's old.
		Explicitly add them because they might be needed...but with versions implied by spring-boot.
	-->
	<dependencies>
		<dependency>
			<groupId>net.sf.jasperreports</groupId>
			<artifactId>jasperreports</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.apache.lucene</groupId>
					<artifactId>lucene-queryparser</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.lucene</groupId>
					<artifactId>lucene-analyzers-common</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.lucene</groupId>
					<artifactId>lucene-core</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.apache.lucene</groupId>
					<artifactId>lucene-queries</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-queryparser</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-analyzers-common</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-queries</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-vfs2</artifactId>
			<version>2.0</version>
		</dependency>

		<dependency>
			<groupId>de.metas.adempiere.adempiere</groupId>
			<artifactId>de.metas.adempiere.adempiere.base</artifactId>
			<version>${metasfresh.version}</version>
		</dependency>

		<dependency>
			<groupId>de.metas.report</groupId>
			<artifactId>de.metas.report.jasper.commons</artifactId>
			<version>${metasfresh.version}</version>
		</dependency>

		<!-- when making the docker image, it shall automatically look for custom SQL scripts and do a migration 
		but the migration.cli shall just be in the docker image, not in the metasfresh-report super.jar-->
		<dependency>
			<groupId>de.metas.migration</groupId>
			<artifactId>de.metas.migration.cli</artifactId>
			<version>${metasfresh.version}</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- Q/R code-->
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>javase</artifactId>
		</dependency>
		<dependency>
			<groupId>com.google.zxing</groupId>
			<artifactId>core</artifactId>
		</dependency>

		<dependency>
			<groupId>ar.com.fdvs</groupId>
			<artifactId>DynamicJasper-core-fonts</artifactId>
			<version>1.0</version>
		</dependency>

		<!-- Thx for the two fonts to http://ansuz.sooke.bc.ca/page/fonts ^^ -->
		<!-- 
			..but don't include them here, because the endcustomer project might require different fonts 
			that might none the less have the same names, in order to be pluggable. 
		<dependency>
			<groupId>jp.osdn.ocra</groupId>
			<artifactId>jp.osdn.ocra</artifactId>
		</dependency>
		<dependency>
			<groupId>jp.osdn.ocrb</groupId>
			<artifactId>jp.osdn.ocrb</artifactId>
		</dependency>
 		-->

 		<!-- JXls integration -->
		<dependency>
			<groupId>org.jxls</groupId>
			<artifactId>jxls</artifactId>
			<version>2.3.0</version>

			<exclusions>
				<exclusion>
					<groupId>ch.qos.logback</groupId>
					<artifactId>logback-core</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.jxls</groupId>
			<artifactId>jxls-poi</artifactId>
			<version>1.0.9</version>
		</dependency>
	</dependencies>

	<build>
		<finalName>metasfresh-report-service</finalName>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<version>${spring-boot.version}</version>
				<executions>
					<execution>
						<id>spring-boot-serverRoot-create-executable-jar</id>
						<goals>
							<goal>repackage</goal>
						</goals>
						<configuration>
							<!-- we *also* need the normal main jar to be use in app
							so don't replace the normal jar, but create the executable jar with this classifier -->
							<classifier>standalone</classifier>

							<executable>true</executable>
							<mainClass>${start-class}</mainClass>
							
							<!-- this also provides the super-jar to the successive docker build 
								Note that the ${docker.build.directory} property  is set by the prepare-docker profile 
								that is activated by the presence of the scr/main/docker folder -->
							<outputDirectory>${docker.build.directory}</outputDirectory>

							<!-- layout=ZIP still creates an executable jar, but with org.springframework.boot.loader.PropertiesLauncher
								 That way we can specify external jars which contain private user specific fonts
								 See issue: https://github.com/metasfresh/metasfresh/issues/2932 
		    					 Also see https://docs.spring.io/spring-boot/docs/current/reference/html/executable-jar.html#executable-jar-property-launcher-features -->
							<layout>ZIP</layout>
						</configuration>
					</execution>

					<execution>
						<id>spring-boot-serverRoot-build-info</id>
						<goals>
							<goal>build-info</goal> <!-- create build-info.properties; thanks to https://docs.spring.io/spring-boot/docs/current/reference/html/howto-build.html#howto-build-info -->
						</goals>
						<configuration>
							<additionalProperties>
								<jenkinsBuildNo>${env.BUILD_NUMBER}</jenkinsBuildNo>
								<jenkinsBuildTag>${env.BUILD_TAG}</jenkinsBuildTag>
								<jenkinsBuildUrl>${env.BUILD_URL}</jenkinsBuildUrl>
								<jenkinsJobName>${env.JOB_NAME}</jenkinsJobName>
							</additionalProperties>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<configuration>
					<rules>
						<banDuplicateClasses>
							<dependencies>
								<dependency>
									<groupId>de.metas.migration</groupId>
									<artifactId>de.metas.migration.cli</artifactId>
									<ignoreClasses>
										<ignoreClass>*</ignoreClass>
									</ignoreClasses>
								</dependency>
							</dependencies>
							<findAllDuplicates>true</findAllDuplicates>
						</banDuplicateClasses>
					</rules>
					<fail>true</fail>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<!-- copy the migration.cli jar
						We specified these artifacts as dependencies further up. Therefore they were already resolved and now we only need to grab 'em by the artifactid without having to specify a particular version.
					-->
					<execution>
						<id>copy-metasfresh-external-lib</id>
						<phase>package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/docker/dist/install/lib</outputDirectory>
							<includeArtifactIds>de.metas.migration.cli</includeArtifactIds>
							<excludeTransitive>true</excludeTransitive>
							<overWriteReleases>true</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
							<stripVersion>true</stripVersion>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

</project>
